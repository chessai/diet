1:1-1:1::Data.Diet.Map.$trModule :: "GHC.Types.Module"
18:13-18:15::Data.Diet.Map.$fEqColor :: "(GHC.Classes.Eq Data.Diet.Map.Color)"
18:17-18:21::Data.Diet.Map.$fReadColor :: "(GHC.Read.Read Data.Diet.Map.Color)"
18:23-18:27::Data.Diet.Map.$fShowColor :: "(GHC.Show.Show Data.Diet.Map.Color)"
24:1-24:9::Data.Diet.Map.collapse :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Classes.Eq b) =>\n[((Data.Interval.Interval a), b)] -> [((Data.Interval.Interval a), b)]"
26:16-26:18::_ :: "{v : [((Data.Interval.Interval a), b)] | len v >= 0} -> [((Data.Interval.Interval a), b)]"
26:20-26:28::_ :: "[((Data.Interval.Interval a), b)] -> [((Data.Interval.Interval a), b)]"
28:5-28:7::go :: "(GHC.Classes.Eq b, GHC.Classes.Ord a, GHC.Enum.Enum a) =>\n{VV : [((Data.Interval.Interval a), b)] | len VV >= 0} -> [((Data.Interval.Interval a), b)]"
29:13-29:18::lq_anf$##7205759403792825698 :: "a"
29:19-29:21::_ :: "x1:a -> x2:a -> {v : GHC.Types.Bool | v <=> x1 == x2}"
29:22-29:27::lq_anf$##7205759403792825699 :: "a"
30:24-30:29::lq_anf$##7205759403792825704 :: "(Data.Interval.Interval a)"
30:30-30:35::_ :: "(Data.Interval.Interval a) -> (Data.Interval.Interval a) -> GHC.Types.Bool"
30:36-30:41::lq_anf$##7205759403792825705 :: "(Data.Interval.Interval a)"
31:30-31:35::lq_anf$##7205759403792825710 :: "(Data.Interval.Interval a)"
31:36-31:44::_ :: "(Data.Interval.Interval a) -> (Data.Interval.Interval a) -> (Data.Interval.Interval a)"
31:45-31:50::lq_anf$##7205759403792825711 :: "(Data.Interval.Interval a)"
31:52-31:57::lq_anf$##7205759403792825713 :: "a"
31:61-31:69::Data.Diet.Map.collapse :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Classes.Eq b) =>\n[((Data.Interval.Interval a), b)] -> [((Data.Interval.Interval a), b)]"
32:33-32:41::Data.Diet.Map.collapse :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Classes.Eq b) =>\n[((Data.Interval.Interval a), b)] -> [((Data.Interval.Interval a), b)]"
33:26-33:34::Data.Diet.Map.collapse :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Classes.Eq b) =>\n[((Data.Interval.Interval a), b)] -> [((Data.Interval.Interval a), b)]"
36:1-36:9::Data.Diet.Map.sortDesc :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n[((Data.Interval.Interval a), b)] -> [((Data.Interval.Interval a), b)]"
36:12-36:23::go :: "{v : ((Data.Interval.Interval a), b) -> ((Data.Interval.Interval a), b) -> GHC.Types.Ordering | v == go}"
38:5-38:7::go :: "((Data.Interval.Interval a), b) -> ((Data.Interval.Interval a), b) -> GHC.Types.Ordering"
38:8-38:9::u :: "((Data.Interval.Interval a), b)"
38:10-38:11::v :: "((Data.Interval.Interval a), b)"
39:9-39:12::lq_anf$##7205759403792825683 :: "a"
39:13-39:14::_ :: "x1:a -> x2:a -> {v : GHC.Types.Bool | v <=> x1 < x2}"
39:15-39:18::lq_anf$##7205759403792825684 :: "a"
40:9-40:12::lq_anf$##7205759403792825687 :: "a"
40:13-40:14::_ :: "x1:a -> x2:a -> {v : GHC.Types.Bool | v <=> x1 > x2}"
40:15-40:18::lq_anf$##7205759403792825688 :: "a"
42:5-42:6::f :: "((Data.Interval.Interval b), a) -> b"
42:9-42:20::lq_anf$##7205759403792825682 :: "((Data.Interval.Interval a), b) -> (Data.Interval.Interval a)"
44:10-44:53::Data.Diet.Map.$fEqMap :: "(GHC.Enum.Enum a, GHC.Classes.Eq a, GHC.Classes.Ord a, GHC.Classes.Eq b) =>\n(GHC.Classes.Eq (Data.Diet.Map.Map a b))"
45:3-45:5::m1 :: "(Data.Diet.Map.Map a b)"
45:6-45:8::$c== :: "(GHC.Enum.Enum a, GHC.Classes.Eq a, GHC.Classes.Ord a, GHC.Classes.Eq b) =>\n(Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> GHC.Types.Bool"
45:9-45:11::m2 :: "(Data.Diet.Map.Map a b)"
45:14-45:23::_ :: "(Data.Diet.Map.Map a b) -> [((Data.Interval.Interval a), b)]"
45:27-45:29::_ :: "x1:[((Data.Interval.Interval a), b)] -> x2:[((Data.Interval.Interval a), b)] -> {v : GHC.Types.Bool | v <=> x1 == x2}"
45:30-45:39::_ :: "(Data.Diet.Map.Map a b) -> [((Data.Interval.Interval a), b)]"
47:10-47:49::Data.Diet.Map.$fOrdMap :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Classes.Ord b) =>\n(GHC.Classes.Ord (Data.Diet.Map.Map a b))"
48:3-48:10::$ccompare :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Classes.Ord b) =>\n(Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> GHC.Types.Ordering"
48:11-48:13::m1 :: "(Data.Diet.Map.Map a b)"
48:14-48:16::m2 :: "(Data.Diet.Map.Map a b)"
48:19-48:26::_ :: "x1:[((Data.Interval.Interval a), b)] -> x2:[((Data.Interval.Interval a), b)] -> {v : GHC.Types.Ordering | (v == GHC.Types.EQ <=> x1 == x2)\n                                                                                                          && (v == GHC.Types.LT <=> x1 < x2)\n                                                                                                          && (v == GHC.Types.GT <=> x1 > x2)}"
48:28-48:37::_ :: "(Data.Diet.Map.Map a b) -> [((Data.Interval.Interval a), b)]"
48:43-48:52::_ :: "(Data.Diet.Map.Map a b) -> [((Data.Interval.Interval a), b)]"
50:10-50:61::Data.Diet.Map.$fMonoidMap :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Classes.Eq b, GHC.Base.Monoid b) =>\n(GHC.Base.Monoid (Data.Diet.Map.Map a b))"
51:3-51:9::$cmempty :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Classes.Eq b, GHC.Base.Monoid b) =>\n(Data.Diet.Map.Map a b)"
52:3-52:10::$cmappend :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Classes.Eq b, GHC.Base.Monoid b) =>\n(Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
52:13-52:24::_ :: "(Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
53:3-53:10::$cmconcat :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Classes.Eq b, GHC.Base.Monoid b) =>\n[(Data.Diet.Map.Map a b)] -> (Data.Diet.Map.Map a b)"
53:13-53:19::_ :: "[(Data.Diet.Map.Map a b)] -> (Data.Diet.Map.Map a b)"
55:10-55:44::Data.Diet.Map.$fFunctorMap :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(GHC.Base.Functor (Data.Diet.Map.Map a))"
56:3-56:7::$cfmap :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(a -> b) -> (Data.Diet.Map.Map a a) -> (Data.Diet.Map.Map a b)"
56:10-56:13::_ :: "(a -> b) -> (Data.Diet.Map.Map c a) -> (Data.Diet.Map.Map c b)"
58:10-58:47::Data.Diet.Map.$fFoldableMap :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(Data.Foldable.Foldable (Data.Diet.Map.Map a))"
59:3-59:7::$cfold :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(GHC.Base.Monoid m) => (Data.Diet.Map.Map a m) -> m"
59:13-59:19::$dMonoid_a7Pr :: "{v : (GHC.Base.Monoid a) | v == $dMonoid_a7Pr}"
60:27-60:33::_ :: "(Data.Diet.Map.Map a b) -> b"
60:36-60:45::_ :: "a -> a -> a"
60:48-60:57::_ :: "a -> a -> a"
60:58-60:64::_ :: "(Data.Diet.Map.Map a b) -> b"
61:3-61:8::$cfoldr :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(a -> b -> b) -> b -> (Data.Diet.Map.Map a a) -> b"
61:12-61:17::_ :: "(a -> b -> b) -> b -> (Data.Diet.Map.Map c a) -> b"
62:3-62:9::$cfoldr' :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(a -> b -> b) -> b -> (Data.Diet.Map.Map a a) -> b"
62:12-62:18::_ :: "(a -> b -> b) -> b -> (Data.Diet.Map.Map c a) -> b"
63:3-63:8::$cfoldl :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(b -> a -> b) -> b -> (Data.Diet.Map.Map a a) -> b"
63:12-63:17::_ :: "(a -> b -> a) -> a -> (Data.Diet.Map.Map c b) -> a"
64:3-64:9::$cfoldl' :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(b -> a -> b) -> b -> (Data.Diet.Map.Map a a) -> b"
64:12-64:18::_ :: "(a -> b -> a) -> a -> (Data.Diet.Map.Map c b) -> a"
65:3-65:10::$cfoldMap :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(GHC.Base.Monoid m) => (a -> m) -> (Data.Diet.Map.Map a a) -> m"
65:18-65:24::$dMonoid_a7PP :: "{v : (GHC.Base.Monoid a) | v == $dMonoid_a7PP}"
66:32-66:41::_ :: "(a -> b) -> (Data.Diet.Map.Map c a) -> b"
66:46-66:55::_ :: "a -> a -> a"
66:56-66:57::_ :: "a -> b"
66:60-66:69::_ :: "a -> a -> a"
66:70-66:79::_ :: "(a -> b) -> (Data.Diet.Map.Map c a) -> b"
67:3-67:7::$cnull :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(Data.Diet.Map.Map a v) -> GHC.Types.Bool"
68:3-68:9::$clength :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(Data.Diet.Map.Map a v) -> GHC.Types.Int"
70:10-70:48::Data.Diet.Map.$fTraversableMap :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(Data.Traversable.Traversable (Data.Diet.Map.Map a))"
71:3-71:11::$ctraverse :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(GHC.Base.Applicative f) =>\n(a -> f b) -> (Data.Diet.Map.Map a a) -> f (Data.Diet.Map.Map a b)"
71:19-71:23::_ :: "(Data.Diet.Map.Map a b) -> c (Data.Diet.Map.Map a b)"
73:7-73:22::lq_anf$##7205759403792826125 :: "(Data.Diet.Map.Map a b) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
73:13-73:17::_ :: "(Data.Interval.Interval a) -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
73:23-73:26::_ :: "((Data.Diet.Map.Map a b) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)) -> c (Data.Diet.Map.Map a b) -> c b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
73:27-73:35::_ :: "(a -> b c) -> (Data.Diet.Map.Map d a) -> b (Data.Diet.Map.Map d c)"
73:40-73:43::_ :: "a (b -> (Data.Diet.Map.Map c b) -> (Data.Diet.Map.Map c b)) -> a b -> a (Data.Diet.Map.Map c b) -> (Data.Diet.Map.Map c b)"
73:44-73:45::_ :: "a -> b c"
73:48-73:51::_ :: "a ((Data.Diet.Map.Map b c) -> (Data.Diet.Map.Map b c)) -> a (Data.Diet.Map.Map b c) -> a (Data.Diet.Map.Map b c)"
73:52-73:60::_ :: "(a -> b c) -> (Data.Diet.Map.Map d a) -> b (Data.Diet.Map.Map d c)"
75:10-75:59::Data.Diet.Map.$fIsListMap :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Classes.Eq b) =>\n(GHC.Exts.IsList (Data.Diet.Map.Map a b))"
77:3-77:11::$cfromList :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Classes.Eq b) =>\n[(GHC.Exts.Item (Data.Diet.Map.Map a b))] -> (Data.Diet.Map.Map a b)"
77:14-77:22::lq_anf$##7205759403792825796 :: "[((Data.Interval.Interval a), b)] -> (Data.Diet.Map.Map a b)"
78:3-78:9::$ctoList :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Classes.Eq b) =>\n(Data.Diet.Map.Map a b) -> [(GHC.Exts.Item (Data.Diet.Map.Map a b))]"
78:14-78:20::lq_anf$##7205759403792825854 :: "(Data.Diet.Map.Map a b) -> [((Data.Interval.Interval a), b)]"
80:10-80:65::Data.Diet.Map.$fShowMap :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Show.Show a, GHC.Show.Show b, GHC.Classes.Eq b) =>\n(GHC.Show.Show (Data.Diet.Map.Map a b))"
81:3-81:12::$cshowsPrec :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Show.Show a, GHC.Show.Show b, GHC.Classes.Eq b) =>\nGHC.Types.Int -> (Data.Diet.Map.Map a b) -> [GHC.Types.Char] -> [GHC.Types.Char]"
81:13-81:14::n :: "GHC.Types.Int"
81:15-81:16::d :: "(Data.Diet.Map.Map a b)"
81:19-81:28::_ :: "{v : GHC.Types.Bool -> ([GHC.Types.Char] -> [GHC.Types.Char]) -> [GHC.Types.Char] -> [GHC.Types.Char] | v == GHC.Show.showParen}"
81:30-81:36::lq_anf$##7205759403792826069 :: "GHC.Types.Bool"
81:32-81:33::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Bool | v <=> x1 > x2}"
81:40-81:50::_ :: "{v : [GHC.Types.Char] -> [GHC.Types.Char] -> [GHC.Types.Char] | v == GHC.Show.showString}"
81:65-81:70::_ :: "[((Data.Interval.Interval a), b)] -> [GHC.Types.Char] -> [GHC.Types.Char]"
81:72-81:78::_ :: "(Data.Diet.Map.Map a b) -> [((Data.Interval.Interval a), b)]"
84:1-84:6::Data.Diet.Map.empty :: "(Data.Diet.Map.Map a b)"
88:1-88:10::Data.Diet.Map.singleton :: "(Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b)"
88:11-88:12::k :: "(Data.Interval.Interval a)"
88:13-88:14::v :: "a"
88:17-88:21::_ :: "(Data.Interval.Interval a) -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
92:1-92:6::Data.Diet.Map.mNode :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\nData.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
92:7-92:8::c :: "Data.Diet.Map.Color"
92:9-92:10::k :: "(Data.Interval.Interval a)"
92:11-92:12::v :: "a"
92:13-92:14::l :: "(Data.Diet.Map.Map a b)"
92:15-92:16::r :: "(Data.Diet.Map.Map a b)"
92:19-92:23::_ :: "(Data.Interval.Interval a) -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
92:27-92:35::_ :: "(Data.Interval.Interval a) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Interval.Interval a)"
95:5-95:13::maxUpper :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(Data.Interval.Interval a) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Interval.Interval a)"
95:14-95:15::k :: "(Data.Interval.Interval a)"
96:38-96:62::_ :: "(Data.Interval.Interval a) -> (Data.Interval.Interval a) -> (Data.Interval.Interval a)"
97:38-97:62::_ :: "(Data.Interval.Interval a) -> (Data.Interval.Interval a) -> (Data.Interval.Interval a)"
98:52-98:76::_ :: "(Data.Interval.Interval a) -> (Data.Interval.Interval a) -> (Data.Interval.Interval a)"
98:80-98:104::_ :: "(Data.Interval.Interval a) -> (Data.Interval.Interval a) -> (Data.Interval.Interval a)"
101:5-101:29::potentialBeyonceBetrayal :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(Data.Interval.Interval a) -> (Data.Interval.Interval a) -> (Data.Interval.Interval a)"
101:30-101:31::x :: "(Data.Interval.Interval a)"
101:32-101:33::y :: "(Data.Interval.Interval a)"
101:36-101:71::lq_anf$##7205759403792825727 :: "GHC.Types.Bool"
101:39-101:44::_ :: "(Data.Interval.Interval a) -> a"
101:47-101:49::_ :: "x1:a -> x2:a -> {v : GHC.Types.Bool | v <=> x1 >= x2}"
101:50-101:55::_ :: "(Data.Interval.Interval a) -> a"
104:1-104:5::Data.Diet.Map.null :: "(Data.Diet.Map.Map a b) -> GHC.Types.Bool"
110:1-110:5::Data.Diet.Map.size :: "(Data.Diet.Map.Map a b) -> GHC.Types.Int"
110:8-110:10::_ :: "GHC.Types.Int -> (Data.Diet.Map.Map a b) -> GHC.Types.Int"
112:5-112:7::go :: "a -> (Data.Diet.Map.Map b c) -> a"
112:9-112:10::p :: "a"
112:11-112:12::q :: "(Data.Diet.Map.Map a b)"
115:27-115:29::go :: "a -> (Data.Diet.Map.Map b c) -> a"
115:31-115:33::go :: "a -> (Data.Diet.Map.Map b c) -> a"
115:38-115:39::_ :: "x1:a -> x2:a -> {VV : a | VV == x1 + x2}"
119:1-119:7::Data.Diet.Map.height :: "(Data.Diet.Map.Map a b) -> GHC.Types.Int"
120:27-120:56::lq_anf$##7205759403792826081 :: "{v : GHC.Types.Int | v == (1 : int)}"
120:29-120:30::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 + x2}"
120:31-120:34::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == (if x1 > x2 then x1 else x2)}"
120:36-120:44::lq_anf$##7205759403792826082 :: "GHC.Types.Int"
120:47-120:55::lq_anf$##7205759403792826083 :: "GHC.Types.Int"
124:1-124:10::Data.Diet.Map.maxHeight :: "GHC.Types.Int -> GHC.Types.Int"
124:11-124:16::nodes :: "GHC.Types.Int"
124:19-124:39::lq_anf$##7205759403792826149 :: "{v : GHC.Types.Int | v == (2 : int)}"
124:21-124:22::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 * x2}"
124:23-124:27::_ :: "{v : GHC.Types.Int -> GHC.Types.Int | v == Data.Diet.Map.log2}"
124:29-124:38::lq_anf$##7205759403792826151 :: "GHC.Types.Int"
124:35-124:36::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 + x2}"
128:1-128:9::Data.Diet.Map.maxNodes :: "GHC.Types.Int -> GHC.Types.Int"
128:10-128:11::k :: "GHC.Types.Int"
128:14-128:25::lq_anf$##7205759403792826135 :: "GHC.Types.Int"
128:16-128:17::_ :: "x1:GHC.Types.Int -> GHC.Types.Int -> {v : GHC.Types.Int | v == 0 <=> x1 == 0}"
128:19-128:24::lq_anf$##7205759403792826134 :: "GHC.Types.Int"
128:21-128:22::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 * x2}"
128:26-128:27::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 - x2}"
131:1-131:10::Data.Diet.Map.showStats :: "(Data.Diet.Map.Map a b) -> (GHC.Types.IO ())"
131:11-131:12::m :: "(Data.Diet.Map.Map a b)"
132:3-132:42::lq_anf$##7205759403792826157 :: "(GHC.Types.IO ())"
132:14-132:42::lq_anf$##7205759403792826156 :: "[GHC.Types.Char]"
132:36-132:40::_ :: "GHC.Types.Int -> [GHC.Types.Char]"
133:3-133:51::lq_anf$##7205759403792826163 :: "(GHC.Types.IO ())"
133:14-133:51::lq_anf$##7205759403792826162 :: "[GHC.Types.Char]"
133:36-133:40::_ :: "GHC.Types.Int -> [GHC.Types.Char]"
133:42-133:50::lq_anf$##7205759403792826160 :: "GHC.Types.Int"
134:3-134:54::lq_anf$##7205759403792826169 :: "(GHC.Types.IO ())"
134:14-134:54::lq_anf$##7205759403792826168 :: "[GHC.Types.Char]"
134:36-134:40::_ :: "GHC.Types.Int -> [GHC.Types.Char]"
134:42-134:51::_ :: "{v : GHC.Types.Int -> GHC.Types.Int | v == Data.Diet.Map.maxHeight}"
135:9-135:10::n :: "GHC.Types.Int"
135:13-135:19::_ :: "GHC.Types.Int"
139:1-139:6::Data.Diet.Map.isRed :: "(Data.Diet.Map.Map a b) -> GHC.Types.Bool"
143:1-143:8::Data.Diet.Map.isBlack :: "(Data.Diet.Map.Map a b) -> GHC.Types.Bool"
143:11-143:22::lq_anf$##7205759403792825772 :: "(Data.Diet.Map.Map a b) -> GHC.Types.Bool"
146:1-146:10::Data.Diet.Map.turnBlack :: "(Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
146:31-146:35::_ :: "(Data.Interval.Interval a) -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
150:1-150:8::Data.Diet.Map.turnRed :: "(Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
150:29-150:33::_ :: "(Data.Interval.Interval a) -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
154:1-154:7::Data.Diet.Map.lookup :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(Data.Interval.Interval a) -> (Data.Diet.Map.Map a b) -> (GHC.Base.Maybe b)"
154:9-154:10::k :: "(Data.Interval.Interval a)"
156:10-156:17::_ :: "x1:(Data.Interval.Interval a) -> x2:(Data.Interval.Interval a) -> {v : GHC.Types.Ordering | (v == GHC.Types.EQ <=> x1 == x2)\n                                                                                            && (v == GHC.Types.LT <=> x1 < x2)\n                                                                                            && (v == GHC.Types.GT <=> x1 > x2)}"
157:11-157:17::Data.Diet.Map.lookup :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(Data.Interval.Interval a) -> (Data.Diet.Map.Map a b) -> (GHC.Base.Maybe b)"
158:11-158:17::Data.Diet.Map.lookup :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(Data.Interval.Interval a) -> (Data.Diet.Map.Map a b) -> (GHC.Base.Maybe b)"
162:1-162:13::Data.Diet.Map.insertAppend :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Classes.Eq b, GHC.Base.Monoid b) =>\n(Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
162:16-162:29::_ :: "((Data.Interval.Interval a) -> b -> b -> b) -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
162:34-162:35::x :: "a"
162:36-162:37::y :: "a"
162:41-162:54::_ :: "a"
162:43-162:52::_ :: "a -> a -> a"
165:1-165:7::Data.Diet.Map.insert :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
165:10-165:23::_ :: "((Data.Interval.Interval a) -> b -> b -> b) -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
165:28-165:29::v :: "a"
168:1-168:11::Data.Diet.Map.insertWith :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(b -> b -> b) -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
168:12-168:13::f :: "a -> a -> a"
168:16-168:29::_ :: "((Data.Interval.Interval a) -> b -> b -> b) -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
168:34-168:37::new :: "a"
168:38-168:41::old :: "a"
168:45-168:46::_ :: "{v : a -> a -> a | v == f}"
171:1-171:14::Data.Diet.Map.insertWithKey :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n((Data.Interval.Interval a) -> b -> b -> b) -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
171:15-171:16::f :: "(Data.Interval.Interval a) -> b -> b -> b"
171:18-171:21::key :: "(Data.Interval.Interval a)"
171:22-171:27::value :: "a"
171:28-171:30::mp :: "(Data.Diet.Map.Map a b)"
171:33-171:40::_ :: "(Data.Diet.Map.Map a b) -> GHC.Types.Bool -> (Data.Diet.Map.Map a b)"
171:42-171:60::lq_anf$##7205759403792825785 :: "(Data.Diet.Map.Map a b)"
171:53-171:56::_ :: "{v : (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) | v == ins}"
171:63-171:70::_ :: "(Data.Interval.Interval a) -> GHC.Types.Bool"
173:5-173:17::singletonRed :: "(Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b)"
173:18-173:19::k :: "(Data.Interval.Interval a)"
173:20-173:21::v :: "a"
173:24-173:28::_ :: "(Data.Interval.Interval a) -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
174:5-174:8::ins :: "(Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
174:14-174:30::_ :: "a -> (Data.Diet.Map.Map b a)"
176:12-176:19::_ :: "x1:(Data.Interval.Interval a) -> x2:(Data.Interval.Interval a) -> {v : GHC.Types.Ordering | (v == GHC.Types.EQ <=> x1 == x2)\n                                                                                            && (v == GHC.Types.LT <=> x1 < x2)\n                                                                                            && (v == GHC.Types.GT <=> x1 > x2)}"
177:15-177:23::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
177:35-177:38::ins :: "(Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
178:15-178:23::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
178:37-178:40::ins :: "(Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
179:15-179:23::_ :: "(Data.Interval.Interval a) -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
179:29-179:30::_ :: "{v : (Data.Interval.Interval a) -> b -> b -> b | v == f}"
182:1-182:12::Data.Diet.Map.unionAppend :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Classes.Eq b, GHC.Base.Monoid b) =>\n(Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
182:15-182:28::_ :: "((Data.Diet.Map.Map a b) -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b)) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
182:30-182:64::lq_anf$##7205759403792825889 :: "(Data.Diet.Map.Map a b) -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b)"
182:32-182:33::f :: "(Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
182:34-182:35::x :: "(Data.Diet.Map.Map a b)"
182:36-182:37::y :: "(Data.Interval.Interval a)"
182:38-182:39::z :: "a"
182:43-182:44::_ :: "{v : (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) | v == f}"
185:1-185:6::Data.Diet.Map.union :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Classes.Eq b) =>\n(Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
185:9-185:21::_ :: "((Data.Interval.Interval a) -> b -> b -> b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
185:26-185:27::v :: "a"
188:1-188:10::Data.Diet.Map.unionWith :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Classes.Eq b) =>\n(b -> b -> b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
188:11-188:12::f :: "a -> a -> a"
188:15-188:27::_ :: "((Data.Interval.Interval a) -> b -> b -> b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
188:32-188:34::v1 :: "a"
188:35-188:37::v2 :: "a"
188:41-188:42::_ :: "{v : a -> a -> a | v == f}"
191:1-191:13::Data.Diet.Map.unionWithKey :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Classes.Eq b) =>\n((Data.Interval.Interval a) -> b -> b -> b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
191:14-191:15::f :: "(Data.Interval.Interval a) -> b -> b -> b"
191:16-191:18::m1 :: "(Data.Diet.Map.Map a b)"
191:19-191:21::m2 :: "(Data.Diet.Map.Map a b)"
191:24-191:43::_ :: "[((Data.Interval.Interval a), b)] -> (Data.Diet.Map.Map a b)"
191:45-191:57::_ :: "((Data.Interval.Interval a) -> b -> b -> b) -> [((Data.Interval.Interval a), b)] -> [((Data.Interval.Interval a), b)] -> [((Data.Interval.Interval a), b)]"
191:61-191:70::_ :: "(Data.Diet.Map.Map a b) -> [((Data.Interval.Interval a), b)]"
191:76-191:85::_ :: "(Data.Diet.Map.Map a b) -> [((Data.Interval.Interval a), b)]"
194:1-194:13::Data.Diet.Map.unionsAppend :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Classes.Eq b, GHC.Base.Monoid b) =>\n[(Data.Diet.Map.Map a b)] -> (Data.Diet.Map.Map a b)"
194:16-194:26::_ :: "(a -> a -> a) -> [(Data.Diet.Map.Map b a)] -> (Data.Diet.Map.Map b a)"
197:1-197:7::Data.Diet.Map.unions :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Classes.Eq b) =>\n[(Data.Diet.Map.Map a b)] -> (Data.Diet.Map.Map a b)"
197:10-197:20::_ :: "(a -> a -> a) -> [(Data.Diet.Map.Map b a)] -> (Data.Diet.Map.Map b a)"
200:1-200:11::Data.Diet.Map.unionsWith :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Classes.Eq b) =>\n(b -> b -> b) -> [(Data.Diet.Map.Map a b)] -> (Data.Diet.Map.Map a b)"
202:19-202:38::_ :: "[((Data.Interval.Interval a), b)] -> (Data.Diet.Map.Map a b)"
202:40-202:70::lq_anf$##7205759403792826386 :: "[((Data.Interval.Interval a), b)]"
202:46-202:48::_ :: "{v : x1:{v : [{v : [((Data.Interval.Interval a), b)] | len v >= 0}] | len v >= 0} -> {v : [{v : [((Data.Interval.Interval a), b)] | len v >= 0}] | len v >= 0\n                                                                                                                                                   && len v <= len x1} | v == go}"
202:50-202:65::lq_anf$##7205759403792826383 :: "(Data.Diet.Map.Map a b) -> [((Data.Interval.Interval a), b)]"
204:5-204:7::go :: "x1:{VV : [{VV : [((Data.Interval.Interval a), b)] | len VV >= 0}] | len VV >= 0} -> {VV : [{VV : [((Data.Interval.Interval a), b)] | len VV >= 0}] | len VV >= 0\n                                                                                                                                                     && len VV <= len x1}"
206:19-206:21::go :: "x1:{VV : [{VV : [((Data.Interval.Interval a), b)] | len VV >= 0}] | len VV >= 0} -> {VV : [{VV : [((Data.Interval.Interval a), b)] | len VV >= 0}] | len VV >= 0\n                                                                                                                                                     && len VV <= len x1}"
206:23-206:35::_ :: "((Data.Interval.Interval a) -> b -> b -> b) -> [((Data.Interval.Interval a), b)] -> [((Data.Interval.Interval a), b)] -> [((Data.Interval.Interval a), b)]"
206:38-206:39::x :: "(Data.Interval.Interval a)"
206:40-206:41::y :: "a"
206:42-206:43::z :: "a"
206:47-206:48::_ :: "a -> a -> a"
206:60-206:62::go :: "x1:{VV : [{VV : [((Data.Interval.Interval a), b)] | len VV >= 0}] | len VV >= 0} -> {VV : [{VV : [((Data.Interval.Interval a), b)] | len VV >= 0}] | len VV >= 0\n                                                                                                                                                     && len VV <= len x1}"
209:1-209:6::Data.Diet.Map.foldr :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(b -> c -> c) -> c -> (Data.Diet.Map.Map a b) -> c"
209:9-209:10::z :: "a"
210:30-210:35::Data.Diet.Map.foldr :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(b -> c -> c) -> c -> (Data.Diet.Map.Map a b) -> c"
210:39-210:40::_ :: "a -> b -> b"
210:44-210:49::Data.Diet.Map.foldr :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(b -> c -> c) -> c -> (Data.Diet.Map.Map a b) -> c"
213:1-213:7::Data.Diet.Map.foldr' :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(b -> c -> c) -> c -> (Data.Diet.Map.Map a b) -> c"
213:11-213:12::z :: "a"
214:32-214:38::Data.Diet.Map.foldr' :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(b -> c -> c) -> c -> (Data.Diet.Map.Map a b) -> c"
214:42-214:43::_ :: "a -> b -> b"
214:47-214:53::Data.Diet.Map.foldr' :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(b -> c -> c) -> c -> (Data.Diet.Map.Map a b) -> c"
217:1-217:6::Data.Diet.Map.foldl :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(b -> c -> b) -> b -> (Data.Diet.Map.Map a c) -> b"
217:9-217:10::z :: "a"
218:30-218:35::Data.Diet.Map.foldl :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(b -> c -> b) -> b -> (Data.Diet.Map.Map a c) -> b"
218:39-218:40::_ :: "a -> b -> a"
218:42-218:47::Data.Diet.Map.foldl :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(b -> c -> b) -> b -> (Data.Diet.Map.Map a c) -> b"
221:1-221:7::Data.Diet.Map.foldl' :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(b -> c -> b) -> b -> (Data.Diet.Map.Map a c) -> b"
221:11-221:12::z :: "a"
222:32-222:38::Data.Diet.Map.foldl' :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(b -> c -> b) -> b -> (Data.Diet.Map.Map a c) -> b"
222:42-222:43::_ :: "a -> b -> a"
222:45-222:51::Data.Diet.Map.foldl' :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(b -> c -> b) -> b -> (Data.Diet.Map.Map a c) -> b"
225:1-225:13::Data.Diet.Map.foldrWithKey :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n((Data.Interval.Interval a) -> b -> c -> c) -> c -> (Data.Diet.Map.Map a b) -> c"
225:16-225:17::z :: "a"
226:37-226:49::Data.Diet.Map.foldrWithKey :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n((Data.Interval.Interval a) -> b -> c -> c) -> c -> (Data.Diet.Map.Map a b) -> c"
226:53-226:54::_ :: "(Data.Interval.Interval a) -> b -> c -> c"
226:60-226:72::Data.Diet.Map.foldrWithKey :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n((Data.Interval.Interval a) -> b -> c -> c) -> c -> (Data.Diet.Map.Map a b) -> c"
229:1-229:14::Data.Diet.Map.foldrWithKey' :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n((Data.Interval.Interval a) -> b -> c -> c) -> c -> (Data.Diet.Map.Map a b) -> c"
229:18-229:19::z :: "a"
230:39-230:52::Data.Diet.Map.foldrWithKey' :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n((Data.Interval.Interval a) -> b -> c -> c) -> c -> (Data.Diet.Map.Map a b) -> c"
230:56-230:57::_ :: "(Data.Interval.Interval a) -> b -> c -> c"
230:63-230:76::Data.Diet.Map.foldrWithKey' :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n((Data.Interval.Interval a) -> b -> c -> c) -> c -> (Data.Diet.Map.Map a b) -> c"
233:1-233:13::Data.Diet.Map.foldlWithKey :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(b -> (Data.Interval.Interval a) -> c -> b) -> b -> (Data.Diet.Map.Map a c) -> b"
233:16-233:17::z :: "a"
234:37-234:49::Data.Diet.Map.foldlWithKey :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(b -> (Data.Interval.Interval a) -> c -> b) -> b -> (Data.Diet.Map.Map a c) -> b"
234:53-234:54::_ :: "a -> (Data.Interval.Interval b) -> c -> a"
234:56-234:68::Data.Diet.Map.foldlWithKey :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(b -> (Data.Interval.Interval a) -> c -> b) -> b -> (Data.Diet.Map.Map a c) -> b"
237:1-237:14::Data.Diet.Map.foldlWithKey' :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(b -> (Data.Interval.Interval a) -> c -> b) -> b -> (Data.Diet.Map.Map a c) -> b"
237:18-237:19::z :: "a"
238:39-238:52::Data.Diet.Map.foldlWithKey' :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(b -> (Data.Interval.Interval a) -> c -> b) -> b -> (Data.Diet.Map.Map a c) -> b"
238:56-238:57::_ :: "a -> (Data.Interval.Interval b) -> c -> a"
238:59-238:72::Data.Diet.Map.foldlWithKey' :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(b -> (Data.Interval.Interval a) -> c -> b) -> b -> (Data.Diet.Map.Map a c) -> b"
241:1-241:4::Data.Diet.Map.map :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(b -> c) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a c)"
241:5-241:6::f :: "a -> b"
241:9-241:19::_ :: "((Data.Interval.Interval a) -> b -> c) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a c)"
241:24-241:25::x :: "a"
241:29-241:30::_ :: "{v : a -> b | v == f}"
244:1-244:11::Data.Diet.Map.mapWithKey :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n((Data.Interval.Interval a) -> b -> c) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a c)"
244:12-244:13::f :: "(Data.Interval.Interval a) -> b -> c"
244:16-244:18::go :: "{v : (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a c) | v == go}"
246:5-246:7::go :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n((Data.Interval.Interval a) -> b -> c) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a c)"
247:27-247:31::_ :: "(Data.Interval.Interval a) -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
247:37-247:38::_ :: "{v : (Data.Interval.Interval a) -> b -> c | v == f}"
247:45-247:47::go :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n((Data.Interval.Interval a) -> b -> c) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a c)"
247:52-247:54::go :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n((Data.Interval.Interval a) -> b -> c) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a c)"
250:1-250:10::Data.Diet.Map.toAscList :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Classes.Eq b) =>\n(Data.Diet.Map.Map a b) -> [((Data.Interval.Interval a), b)]"
250:13-250:25::_ :: "((Data.Interval.Interval a) -> b -> [((Data.Interval.Interval a), b)] -> [((Data.Interval.Interval a), b)]) -> [((Data.Interval.Interval a), b)] -> (Data.Diet.Map.Map a b) -> [((Data.Interval.Interval a), b)]"
250:28-250:29::k :: "(Data.Interval.Interval a)"
250:30-250:31::v :: "a"
250:32-250:33::r :: "[((Data.Interval.Interval a), b)]"
253:1-253:11::Data.Diet.Map.toDescList :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Classes.Eq b) =>\n(Data.Diet.Map.Map a b) -> [((Data.Interval.Interval a), b)]"
253:14-253:26::_ :: "([((Data.Interval.Interval a), b)] -> (Data.Interval.Interval a) -> b -> [((Data.Interval.Interval a), b)]) -> [((Data.Interval.Interval a), b)] -> (Data.Diet.Map.Map a b) -> [((Data.Interval.Interval a), b)]"
253:29-253:30::r :: "[((Data.Interval.Interval a), b)]"
253:31-253:32::k :: "(Data.Interval.Interval a)"
253:33-253:34::v :: "a"
256:1-256:7::Data.Diet.Map.toList :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Classes.Eq b) =>\n(Data.Diet.Map.Map a b) -> [((Data.Interval.Interval a), b)]"
256:10-256:19::$dEq_a7ez :: "{v : (GHC.Classes.Eq a) | v == $dEq_a7ez}"
259:1-259:9::Data.Diet.Map.fromList :: "(GHC.Enum.Enum a, GHC.Classes.Ord a, GHC.Classes.Eq b) =>\n[((Data.Interval.Interval a), b)] -> (Data.Diet.Map.Map a b)"
259:13-259:21::_ :: "((Data.Diet.Map.Map a b) -> ((Data.Interval.Interval a), b) -> (Data.Diet.Map.Map a b)) -> (Data.Diet.Map.Map a b) -> [((Data.Interval.Interval a), b)] -> (Data.Diet.Map.Map a b)"
259:23-259:47::lq_anf$##7205759403792825793 :: "((Data.Interval.Interval a), b)"
259:24-259:25::m :: "(Data.Diet.Map.Map a b)"
259:35-259:41::_ :: "(Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
262:1-262:13::Data.Diet.Map.ascListUnion :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n((Data.Interval.Interval a) -> b -> b -> b) -> [((Data.Interval.Interval a), b)] -> [((Data.Interval.Interval a), b)] -> [((Data.Interval.Interval a), b)]"
266:10-266:17::_ :: "x1:(Data.Interval.Interval a) -> x2:(Data.Interval.Interval a) -> {v : GHC.Types.Ordering | (v == GHC.Types.EQ <=> x1 == x2)\n                                                                                            && (v == GHC.Types.LT <=> x1 < x2)\n                                                                                            && (v == GHC.Types.GT <=> x1 > x2)}"
267:15-267:27::Data.Diet.Map.ascListUnion :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n((Data.Interval.Interval a) -> b -> b -> b) -> [((Data.Interval.Interval a), b)] -> [((Data.Interval.Interval a), b)] -> [((Data.Interval.Interval a), b)]"
268:15-268:27::Data.Diet.Map.ascListUnion :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n((Data.Interval.Interval a) -> b -> b -> b) -> [((Data.Interval.Interval a), b)] -> [((Data.Interval.Interval a), b)] -> [((Data.Interval.Interval a), b)]"
269:16-269:17::_ :: "(Data.Interval.Interval a) -> b -> b -> b"
269:30-269:42::Data.Diet.Map.ascListUnion :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n((Data.Interval.Interval a) -> b -> b -> b) -> [((Data.Interval.Interval a), b)] -> [((Data.Interval.Interval a), b)] -> [((Data.Interval.Interval a), b)]"
275:1-275:20::Data.Diet.Map.fromDistinctAscList :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n[((Data.Interval.Interval a), b)] -> (Data.Diet.Map.Map a b)"
275:21-275:23::ls :: "[((Data.Interval.Interval a), b)]"
276:10-276:12::_ :: "x1:{v : GHC.Types.Int | v == len ls\n                        && v >= 0} -> x2:{v : [((Data.Interval.Interval a), b)] | x1 == len v\n                                                                                  && len v <= len ls\n                                                                                  && len v >= len ls\n                                                                                  && len v >= 0\n                                                                                  && len v == len ls} -> (Data.Diet.Map.T2 (Data.Diet.Map.Map a b) {v : [((Data.Interval.Interval a), b)] | len v <= len x2\n                                                                                                                                                                                            && len v <= len ls\n                                                                                                                                                                                            && len v >= 0})"
276:14-276:20::_ :: "xs:[((Data.Interval.Interval a), b)] -> {v : GHC.Types.Int | v >= 0\n                                                             && v == len xs}"
278:12-278:17::_ :: "{v : [GHC.Types.Char] | false} -> (Data.Diet.Map.Map a b)"
280:5-280:7::go :: "(GHC.Classes.Ord a, GHC.Enum.Enum a) =>\nn:{VV : GHC.Types.Int | VV == len ls\n                        && VV >= 0} -> xs:{VV : [((Data.Interval.Interval a), b)] | n == len VV\n                                                                                    && len VV <= len ls\n                                                                                    && len VV >= len ls\n                                                                                    && len VV >= 0\n                                                                                    && len VV == len ls} -> (Data.Diet.Map.T2 (Data.Diet.Map.Map a b) {VV : [((Data.Interval.Interval a), b)] | len VV <= len xs\n                                                                                                                                                                                                && len VV <= len ls\n                                                                                                                                                                                                && len VV >= 0})"
280:8-280:9::n :: "{VV : GHC.Types.Int | VV == len ls\n                      && VV >= 0}"
280:10-280:12::xs :: "{VV : [((Data.Interval.Interval a), b)] | n == len VV\n                                          && len VV <= len ls\n                                          && len VV >= len ls\n                                          && len VV >= 0\n                                          && len VV == len ls}"
281:9-281:15::lq_anf$##7205759403792826356 :: "GHC.Types.Bool"
281:11-281:13::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Bool | v <=> x1 == x2}"
281:23-281:28::lq_anf$##7205759403792826361 :: "(Data.Diet.Map.Map a b)"
282:9-282:18::_ :: "{v : GHC.Types.Int -> GHC.Types.Bool | v == Data.Diet.Map.isPerfect}"
282:23-282:29::_ :: "GHC.Types.Int -> [((Data.Interval.Interval a), b)] -> (Data.Diet.Map.T2 (Data.Diet.Map.Map a b) [((Data.Interval.Interval a), b)])"
283:23-283:29::_ :: "GHC.Types.Int -> GHC.Types.Int -> [((Data.Interval.Interval a), b)] -> (Data.Diet.Map.T2 (Data.Diet.Map.Map a b) [((Data.Interval.Interval a), b)])"
283:33-283:37::_ :: "{v : GHC.Types.Int -> GHC.Types.Int | v == Data.Diet.Map.log2}"
284:5-284:11::buildB :: "{VV : a | VV /= 0\n          && VV >= 0\n          && VV > 0} -> x2:{VV : [((Data.Interval.Interval b), c)] | len VV <= len ls\n                                                                     && len VV >= 0} -> (Data.Diet.Map.T2 (Data.Diet.Map.Map b c) {VV : [((Data.Interval.Interval b), c)] | len VV >= 0\n                                                                                                                                                                            && len VV <= len x2\n                                                                                                                                                                            && len VV <= len ls\n                                                                                                                                                                            && len VV < len x2\n                                                                                                                                                                            && len VV < len ls\n                                                                                                                                                                            && VV /= x2})"
284:12-284:13::n :: "{VV : a | VV /= 0\n          && VV >= 0\n          && VV > 0}"
284:15-284:17::xs :: "{VV : [((Data.Interval.Interval a), b)] | len VV <= len ls\n                                          && len VV >= 0}"
285:9-285:15::lq_anf$##7205759403792826327 :: "GHC.Types.Bool"
285:11-285:13::_ :: "x1:a -> x2:a -> {v : GHC.Types.Bool | v <=> x1 <= x2}"
285:18-285:23::_ :: "{v : [GHC.Types.Char] | false} -> (Data.Diet.Map.T2 (Data.Diet.Map.Map a b) [((Data.Interval.Interval a), b)])"
286:9-286:15::lq_anf$##7205759403792826331 :: "GHC.Types.Bool"
286:11-286:13::_ :: "x1:a -> x2:a -> {v : GHC.Types.Bool | v <=> x1 == x2}"
288:30-288:51::_ :: "[((Data.Interval.Interval a), b)] -> (Data.Diet.Map.T2 (Data.Diet.Map.Map a b) [((Data.Interval.Interval a), b)])"
288:34-288:38::_ :: "(Data.Interval.Interval a) -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
289:30-289:35::_ :: "{v : [GHC.Types.Char] | false} -> (Data.Diet.Map.T2 (Data.Diet.Map.Map a b) [((Data.Interval.Interval a), b)])"
291:16-291:26::lq_anf$##7205759403792826334 :: "a"
291:18-291:24::_ :: "x1:a -> x2:{VV : a | VV /= 0} -> {VV : a | VV == x1 / x2\n                                           && (x1 >= 0\n                                               && x2 >= 0 => VV >= 0)\n                                           && (x1 >= 0\n                                               && x2 >= 1 => VV <= x1)}"
293:15-293:17::n' :: "a"
293:26-293:32::buildB :: "{VV : a | VV /= 0\n          && VV >= 0\n          && VV > 0} -> x2:{VV : [((Data.Interval.Interval b), c)] | len VV <= len ls\n                                                                     && len VV >= 0} -> (Data.Diet.Map.T2 (Data.Diet.Map.Map b c) {VV : [((Data.Interval.Interval b), c)] | len VV >= 0\n                                                                                                                                                                            && len VV <= len x2\n                                                                                                                                                                            && len VV <= len ls\n                                                                                                                                                                            && len VV < len x2\n                                                                                                                                                                            && len VV < len ls\n                                                                                                                                                                            && VV /= x2})"
294:30-294:35::_ :: "{v : [GHC.Types.Char] | false} -> (Data.Diet.Map.T2 (Data.Diet.Map.Map a b) [((Data.Interval.Interval a), b)])"
295:44-295:50::buildB :: "{VV : a | VV /= 0\n          && VV >= 0\n          && VV > 0} -> x2:{VV : [((Data.Interval.Interval b), c)] | len VV <= len ls\n                                                                     && len VV >= 0} -> (Data.Diet.Map.T2 (Data.Diet.Map.Map b c) {VV : [((Data.Interval.Interval b), c)] | len VV >= 0\n                                                                                                                                                                            && len VV <= len x2\n                                                                                                                                                                            && len VV <= len ls\n                                                                                                                                                                            && len VV < len x2\n                                                                                                                                                                            && len VV < len ls\n                                                                                                                                                                            && VV /= x2})"
296:36-296:56::_ :: "[((Data.Interval.Interval a), b)] -> (Data.Diet.Map.T2 (Data.Diet.Map.Map a b) [((Data.Interval.Interval a), b)])"
296:40-296:45::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
299:5-299:11::buildR :: "{VV : a | VV >= 0} -> b -> x3:{VV : [((Data.Interval.Interval c), d)] | len VV <= len ls\n                                                                        && len VV >= 0} -> (Data.Diet.Map.T2 (Data.Diet.Map.Map c d) {VV : [((Data.Interval.Interval c), d)] | len VV >= 0\n                                                                                                                                                                               && len VV <= len ls\n                                                                                                                                                                               && len VV <= len x3})"
299:12-299:13::n :: "{VV : a | VV >= 0}"
299:15-299:16::d :: "a"
299:18-299:20::xs :: "{VV : [((Data.Interval.Interval a), b)] | len VV <= len ls\n                                          && len VV >= 0}"
300:9-300:15::lq_anf$##7205759403792826231 :: "GHC.Types.Bool"
300:11-300:13::_ :: "x1:a -> x2:a -> {v : GHC.Types.Bool | v <=> x1 == x2}"
300:18-300:23::lq_anf$##7205759403792826270 :: "(Data.Diet.Map.Map a b)"
301:9-301:15::lq_anf$##7205759403792826235 :: "GHC.Types.Bool"
301:11-301:13::_ :: "x1:a -> x2:a -> {v : GHC.Types.Bool | v <=> x1 == x2}"
303:28-303:73::_ :: "[((Data.Interval.Interval a), b)] -> (Data.Diet.Map.T2 (Data.Diet.Map.Map a b) [((Data.Interval.Interval a), b)])"
303:32-303:60::_ :: "(Data.Interval.Interval a) -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
303:36-303:59::lq_anf$##7205759403792826266 :: "Data.Diet.Map.Color"
303:39-303:45::lq_anf$##7205759403792826264 :: "GHC.Types.Bool"
303:41-303:43::_ :: "x1:a -> x2:a -> {v : GHC.Types.Bool | v <=> x1 == x2}"
304:28-304:33::_ :: "{v : [GHC.Types.Char] | false} -> (Data.Diet.Map.T2 (Data.Diet.Map.Map a b) [((Data.Interval.Interval a), b)])"
306:16-306:26::lq_anf$##7205759403792826238 :: "a"
306:18-306:24::_ :: "x1:a -> x2:{VV : a | VV /= 0} -> {VV : a | VV == x1 / x2\n                                           && (x1 >= 0\n                                               && x2 >= 0 => VV >= 0)\n                                           && (x1 >= 0\n                                               && x2 >= 1 => VV <= x1)}"
308:15-308:17::n' :: "a"
308:26-308:32::buildR :: "{VV : a | VV >= 0} -> b -> x3:{VV : [((Data.Interval.Interval c), d)] | len VV <= len ls\n                                                                        && len VV >= 0} -> (Data.Diet.Map.T2 (Data.Diet.Map.Map c d) {VV : [((Data.Interval.Interval c), d)] | len VV >= 0\n                                                                                                                                                                               && len VV <= len ls\n                                                                                                                                                                               && len VV <= len x3})"
308:37-308:42::lq_anf$##7205759403792826241 :: "a"
308:39-308:40::_ :: "x1:a -> x2:a -> {VV : a | VV == x1 - x2}"
309:30-309:35::_ :: "{v : [GHC.Types.Char] | false} -> (Data.Diet.Map.T2 (Data.Diet.Map.Map a b) [((Data.Interval.Interval a), b)])"
310:44-310:50::buildR :: "{VV : a | VV >= 0} -> b -> x3:{VV : [((Data.Interval.Interval c), d)] | len VV <= len ls\n                                                                        && len VV >= 0} -> (Data.Diet.Map.T2 (Data.Diet.Map.Map c d) {VV : [((Data.Interval.Interval c), d)] | len VV >= 0\n                                                                                                                                                                               && len VV <= len ls\n                                                                                                                                                                               && len VV <= len x3})"
310:52-310:64::lq_anf$##7205759403792826251 :: "a"
310:54-310:55::_ :: "x1:a -> x2:a -> {VV : a | VV == x1 - x2}"
310:57-310:63::lq_anf$##7205759403792826250 :: "a"
310:60-310:61::_ :: "x1:a -> x2:a -> {VV : a | VV == x1 + x2}"
310:67-310:72::lq_anf$##7205759403792826254 :: "a"
310:69-310:70::_ :: "x1:a -> x2:a -> {VV : a | VV == x1 - x2}"
311:36-311:56::_ :: "[((Data.Interval.Interval a), b)] -> (Data.Diet.Map.T2 (Data.Diet.Map.Map a b) [((Data.Interval.Interval a), b)])"
311:40-311:45::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
317:1-317:10::Data.Diet.Map.isPerfect :: "GHC.Types.Int -> GHC.Types.Bool"
317:11-317:12::n :: "GHC.Types.Int"
317:15-317:35::lq_anf$##7205759403792826174 :: "{v : GHC.Types.Int | v == (0 : int)}"
317:16-317:29::lq_anf$##7205759403792826173 :: "GHC.Types.Int"
317:18-317:21::_ :: "GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int"
317:23-317:28::lq_anf$##7205759403792826172 :: "GHC.Types.Int"
317:25-317:26::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 + x2}"
317:31-317:33::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Bool | v <=> x1 == x2}"
320:1-320:5::Data.Diet.Map.log2 :: "GHC.Types.Int -> GHC.Types.Int"
320:8-320:10::_ :: "GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int"
320:12-320:14::lq_anf$##7205759403792826148 :: "GHC.Types.Int"
322:5-322:7::go :: "a -> b -> a"
322:9-322:10::p :: "a"
322:11-322:12::q :: "a"
323:9-323:15::lq_anf$##7205759403792826140 :: "GHC.Types.Bool"
323:11-323:13::_ :: "x1:a -> x2:a -> {v : GHC.Types.Bool | v <=> x1 <= x2}"
324:21-324:23::go :: "a -> b -> a"
324:25-324:30::lq_anf$##7205759403792826144 :: "a"
324:27-324:28::_ :: "x1:a -> x2:a -> {VV : a | VV == x1 + x2}"
324:33-324:45::lq_anf$##7205759403792826146 :: "a"
324:35-324:43::_ :: "a -> GHC.Types.Int -> a"
330:1-330:7::Data.Diet.Map.unwrap :: "(Data.Diet.Map.Shrunk a b) -> (Data.Diet.Map.Map a b)"
337:1-337:8::Data.Diet.Map.unwrap' :: "(Data.Diet.Map.ShrunkVal a b c) -> (Data.Diet.Map.Map a b)"
341:1-341:9::Data.Diet.Map.annotate :: "(Data.Diet.Map.Shrunk a b) -> c -> (Data.Diet.Map.ShrunkVal a b c)"
341:16-341:17::x :: "a"
341:20-341:24::_ :: "a -> (Data.Diet.Map.ShrunkVal b c a)"
342:20-342:24::_ :: "a -> (Data.Diet.Map.ShrunkVal b c a)"
345:1-345:7::Data.Diet.Map.delete :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(Data.Interval.Interval a) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
345:8-345:11::key :: "(Data.Interval.Interval a)"
345:12-345:14::mp :: "(Data.Diet.Map.Map a b)"
345:17-345:52::Data.Diet.Map.turnBlack :: "(Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
345:28-345:51::lq_anf$##7205759403792826016 :: "(Data.Diet.Map.Map a b)"
345:36-345:43::_ :: "(Data.Interval.Interval a) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Shrunk a b)"
348:1-348:8::Data.Diet.Map.delete' :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(Data.Interval.Interval a) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Shrunk a b)"
348:10-348:11::x :: "(Data.Interval.Interval a)"
348:17-348:21::lq_anf$##7205759403792826012 :: "(Data.Diet.Map.Map a b)"
350:10-350:17::_ :: "x1:(Data.Interval.Interval a) -> x2:(Data.Interval.Interval a) -> {v : GHC.Types.Ordering | (v == GHC.Types.EQ <=> x1 == x2)\n                                                                                            && (v == GHC.Types.LT <=> x1 < x2)\n                                                                                            && (v == GHC.Types.GT <=> x1 > x2)}"
351:18-351:25::Data.Diet.Map.delete' :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(Data.Interval.Interval a) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Shrunk a b)"
352:19-352:39::Data.Diet.Map.$WU :: "(Data.Diet.Map.Map a b) -> (Data.Diet.Map.Shrunk a b)"
352:22-352:27::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
353:19-353:30::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Shrunk a b)"
354:18-354:25::Data.Diet.Map.delete' :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(Data.Interval.Interval a) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Shrunk a b)"
355:19-355:39::Data.Diet.Map.$WU :: "(Data.Diet.Map.Map a b) -> (Data.Diet.Map.Shrunk a b)"
355:22-355:27::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
356:19-356:30::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Shrunk a b)"
358:21-358:55::lq_anf$##7205759403792826002 :: "{v : GHC.Types.Bool | v <=> c == Data.Diet.Map.B}"
358:24-358:30::lq_anf$##7205759403792826001 :: "{v : GHC.Types.Bool | v <=> c == Data.Diet.Map.B}"
358:26-358:28::Data.Diet.Map.$fEqColor :: "(GHC.Classes.Eq Data.Diet.Map.Color)"
358:36-358:46::l :: "{v : (Data.Diet.Map.Map a b) | v == l}"
358:52-358:55::l :: "{v : (Data.Diet.Map.Map a b) | v == l}"
359:26-359:36::_ :: "(Data.Diet.Map.Map a b) -> (Data.Diet.Map.ShrunkVal a b ((Data.Interval.Interval a), b))"
360:36-360:58::Data.Diet.Map.$WU :: "(Data.Diet.Map.Map a b) -> (Data.Diet.Map.Shrunk a b)"
360:39-360:44::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
361:36-361:47::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Shrunk a b)"
364:1-364:10::Data.Diet.Map.deleteMin :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
365:15-365:49::Data.Diet.Map.turnBlack :: "(Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
365:26-365:48::lq_anf$##7205759403792825978 :: "(Data.Diet.Map.Map a b)"
365:35-365:45::_ :: "(Data.Diet.Map.Map a b) -> (Data.Diet.Map.ShrunkVal a b ((Data.Interval.Interval a), b))"
368:1-368:11::Data.Diet.Map.deleteMin' :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(Data.Diet.Map.Map a b) -> (Data.Diet.Map.ShrunkVal a b ((Data.Interval.Interval a), b))"
368:17-368:22::_ :: "{v : [GHC.Types.Char] | false} -> (Data.Diet.Map.ShrunkVal a b ((Data.Interval.Interval a), b))"
369:33-369:38::lq_anf$##7205759403792825966 :: "(Data.Diet.Map.Map a b)"
370:49-370:65::_ :: "((Data.Interval.Interval a), b) -> (Data.Diet.Map.ShrunkVal a b ((Data.Interval.Interval a), b))"
370:53-370:64::lq_anf$##7205759403792825964 :: "(Data.Diet.Map.Map a b)"
371:32-371:36::_ :: "((Data.Interval.Interval a), b) -> (Data.Diet.Map.ShrunkVal a b ((Data.Interval.Interval a), b))"
373:10-373:20::Data.Diet.Map.deleteMin' :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\n(Data.Diet.Map.Map a b) -> (Data.Diet.Map.ShrunkVal a b ((Data.Interval.Interval a), b))"
374:19-374:40::_ :: "((Data.Interval.Interval a), b) -> (Data.Diet.Map.ShrunkVal a b ((Data.Interval.Interval a), b))"
374:23-374:28::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
375:19-375:52::_ :: "((Data.Interval.Interval a), b) -> (Data.Diet.Map.ShrunkVal a b ((Data.Interval.Interval a), b))"
375:29-375:40::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Shrunk a b)"
378:1-378:9::Data.Diet.Map.blackify :: "(Data.Diet.Map.Map a b) -> (Data.Diet.Map.Shrunk a b)"
378:29-378:47::Data.Diet.Map.$WU :: "(Data.Diet.Map.Map a b) -> (Data.Diet.Map.Shrunk a b)"
378:32-378:36::_ :: "(Data.Interval.Interval a) -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
379:14-379:17::ds_d7Yd :: "(Data.Diet.Map.Map a b)"
382:1-382:9::Data.Diet.Map.balanceL :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\nData.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
382:12-382:14::zk :: "(Data.Interval.Interval a)"
382:15-382:17::zv :: "a"
382:54-382:55::d :: "(Data.Diet.Map.Map a b)"
383:5-383:10::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
383:20-383:25::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
383:40-383:45::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
385:5-385:10::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
385:20-385:25::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
385:40-385:45::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
386:24-386:29::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
389:1-389:9::Data.Diet.Map.balanceR :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\nData.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
389:12-389:14::xk :: "(Data.Interval.Interval a)"
389:15-389:17::xv :: "a"
389:18-389:19::a :: "(Data.Diet.Map.Map a b)"
390:5-390:10::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
390:20-390:25::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
390:40-390:45::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
392:5-392:10::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
392:20-392:25::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
392:40-392:45::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
393:24-393:29::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
396:1-396:12::Data.Diet.Map.unbalancedL :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\nData.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Shrunk a b)"
396:15-396:16::k :: "(Data.Interval.Interval a)"
396:17-396:18::v :: "a"
396:19-396:20::l :: "(Data.Diet.Map.Map a b)"
396:38-396:39::r :: "(Data.Diet.Map.Map a b)"
396:42-396:74::Data.Diet.Map.$WU :: "(Data.Diet.Map.Map a b) -> (Data.Diet.Map.Shrunk a b)"
396:45-396:53::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
396:61-396:70::lq_anf$##7205759403792825803 :: "(Data.Diet.Map.Map a b)"
397:42-397:74::Data.Diet.Map.$WS :: "(Data.Diet.Map.Map a b) -> (Data.Diet.Map.Shrunk a b)"
397:45-397:53::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
397:61-397:70::lq_anf$##7205759403792825812 :: "(Data.Diet.Map.Map a b)"
399:5-399:57::Data.Diet.Map.$WU :: "(Data.Diet.Map.Map a b) -> (Data.Diet.Map.Shrunk a b)"
399:8-399:13::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
399:26-399:34::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
399:42-399:52::lq_anf$##7205759403792825809 :: "(Data.Diet.Map.Map a b)"
400:25-400:28::r :: "{v : (Data.Diet.Map.Map a b) | v == r}"
403:1-403:12::Data.Diet.Map.unbalancedR :: "(GHC.Enum.Enum a, GHC.Classes.Ord a) =>\nData.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Shrunk a b)"
403:15-403:16::k :: "(Data.Interval.Interval a)"
403:17-403:18::v :: "a"
403:19-403:20::l :: "(Data.Diet.Map.Map a b)"
403:21-403:22::r :: "(Data.Diet.Map.Map a b)"
403:42-403:74::Data.Diet.Map.$WS :: "(Data.Diet.Map.Map a b) -> (Data.Diet.Map.Shrunk a b)"
403:45-403:53::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
403:63-403:72::lq_anf$##7205759403792825826 :: "(Data.Diet.Map.Map a b)"
404:42-404:74::Data.Diet.Map.$WU :: "(Data.Diet.Map.Map a b) -> (Data.Diet.Map.Shrunk a b)"
404:45-404:53::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
404:63-404:72::lq_anf$##7205759403792825817 :: "(Data.Diet.Map.Map a b)"
406:5-406:57::Data.Diet.Map.$WU :: "(Data.Diet.Map.Map a b) -> (Data.Diet.Map.Shrunk a b)"
406:8-406:13::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
406:23-406:31::_ :: "Data.Diet.Map.Color -> (Data.Interval.Interval a) -> b -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b) -> (Data.Diet.Map.Map a b)"
406:41-406:51::lq_anf$##7205759403792825823 :: "(Data.Diet.Map.Map a b)"
407:25-407:28::r :: "{v : (Data.Diet.Map.Map a b) | v == r}"